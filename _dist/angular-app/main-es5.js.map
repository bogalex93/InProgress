{"version":3,"sources":["webpack:///app/$_lazy_route_resource lazy namespace object","webpack:///app/global/environment.ts","webpack:///app/main-routing.module.ts","webpack:///app/main.module.ts","webpack:///app/main.ts","webpack:///app/root/root.component.ts","webpack:///app/root/root.component.html"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","environment","production","routes","MainRoutingModule","forRoot","imports","MainModule","declarations","providers","bootstrap","screenMeta","bootstrapModule","err","console","error","RootComponent","title","selector","templateUrl","styleUrls"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./app/$$_lazy_route_resource lazy recursive\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule { }\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MainRoutingModule } from './main-routing.module';\nimport { RootComponent } from './root/root.component';\n\n@NgModule({\n  declarations: [\n    RootComponent\n  ],\n  imports: [\n    BrowserModule,\n    MainRoutingModule\n  ],\n  providers: [],\n  bootstrap: [RootComponent]\n})\n\nexport class MainModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MainModule } from './main.module';\nimport { environment } from './global/environment';\nimport { CrossoverRenderer } from 'crossover/crossover-ipc.renderer';\nimport { InitializationEvents } from 'crossover/crossover.channels';\nimport { ScreenMeta } from 'crossover/crossover.models';\n\nlet screenMeta : ScreenMeta;\n\nif (environment.production) {\n  enableProdMode();\n}\n\n// async function takeScreenShot() {  \n//   const maxDimension = Math.max(screenMeta.width, screenMeta.height);\n//   const thumbSize = { width: maxDimension * window.devicePixelRatio, height: maxDimension * window.devicePixelRatio };\n//   let options = { types: ['screen'], thumbnailSize: thumbSize };\n//   var sources = await CrossoverRenderer.electron.desktopCapturer.getSources(options);\n//   var image = sources[0].thumbnail.toDataURL();\n//   document.body.style.background = `url(\"${image}\") top right no-repeat`;\n// }\n\n//CrossoverRenderer.subscribe(InitializationEvents, (e, m: ScreenMeta) => { screenMeta = m; takeScreenShot()});\n//window.onblur = e=> document.body.style.background =  \"transparent\"; \nplatformBrowserDynamic().bootstrapModule(MainModule).catch(err => console.error(err));\n","import { Component, AfterViewInit } from '@angular/core';\nimport { electron } from '../shared/services/electron.service';\nimport { CrossoverRenderer } from 'crossover/crossover-ipc.renderer';\nimport { ScreenMeta } from 'crossover/crossover.models';\nimport { InitializationEvents } from 'crossover/crossover.channels';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n})\nexport class RootComponent implements AfterViewInit {\n\n  title = \"it works\";\n  screenMeta: ScreenMeta;\n\n  constructor() {    \n   \n  }\n  \n  async ngAfterViewInit(): Promise<void> {      \n   \n  }\n\n\n}\n","<div class=\"container\">\r\n    <div class=\"note\">\r\n        <div class=\"title-container\">\r\n            <h2 class=\"title\">Note title</h2>\r\n            <span class=\"date\">18/03/2020</span>\r\n        </div>\r\n        <div class=\"body\">\r\n            description\r\n        </div>\r\n    </div>\r\n    <div class=\"note\">\r\n        <div class=\"title-container\">\r\n            <h2 class=\"title\">Note title</h2>\r\n            <span class=\"date\">18/03/2020</span>\r\n        </div>\r\n        <div class=\"body\">\r\n            description\r\n        </div>\r\n    </div>\r\n    <div class=\"note success\">\r\n        <div class=\"title-container\">\r\n            <h2 class=\"title\">Note title</h2>\r\n            <span class=\"date\">18/03/2020</span>\r\n        </div>\r\n        <div class=\"body\">\r\n            description\r\n        </div>\r\n    </div>\r\n</div>"]}