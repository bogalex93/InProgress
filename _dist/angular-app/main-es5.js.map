{"version":3,"sources":["webpack:///app/$_lazy_route_resource lazy namespace object","webpack:///app/global/environment.ts","webpack:///app/main-routing.module.ts","webpack:///app/main.module.ts","webpack:///app/main.ts","webpack:///app/root/root.component.ts","webpack:///app/root/root.component.html","webpack:///app/shared/services/electron.service.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","environment","production","routes","MainRoutingModule","forRoot","imports","MainModule","declarations","providers","bootstrap","bootstrapModule","err","console","error","RootComponent","title","takeScreenShot","determineScreenShotSize","width","height","maxDimension","Math","max","window","devicePixelRatio","thumbSize","options","types","thumbnailSize","desktopCapturer","getSources","sources","image","thumbnail","toDataURL","document","body","style","background","backgroundAttachment","selector","templateUrl","styleUrls","electron","require","ElectronService","navigator","userAgent","match","isElectronApp","process","platform","arch","ipcRenderer","remote","webFrame","clipboard","crashReporter","nativeImage","screen","shell","providedIn"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./app/$$_lazy_route_resource lazy recursive\";","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class MainRoutingModule { }\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MainRoutingModule } from './main-routing.module';\nimport { RootComponent } from './root/root.component';\n\n@NgModule({\n  declarations: [\n    RootComponent\n  ],\n  imports: [\n    BrowserModule,\n    MainRoutingModule\n  ],\n  providers: [],\n  bootstrap: [RootComponent]\n})\n\nexport class MainModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { MainModule } from './main.module';\nimport { environment } from './global/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(MainModule)\n.catch(err => console.error(err));\n","import { Component, AfterViewInit } from '@angular/core';\nimport { electron } from '../shared/services/electron.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './root.component.html',\n  styleUrls: ['./root.component.scss'],\n})\nexport class RootComponent implements AfterViewInit {\n\n  title = \"it works\";\n\n  constructor() {    \n  }\n  ngAfterViewInit(): void {\n    this.takeScreenShot();\n  }\n\n  async takeScreenShot() {\n    // var sources = await this.electronService.desktopCapturer.getSources({ types: ['window','screen'] });\n    //let source = sources[0];\n    //  console.log(sources);\n\n    const thumbSize = determineScreenShotSize()\n    let options = { types: ['screen'], thumbnailSize: thumbSize }    \n    var sources = await electron.desktopCapturer.getSources(options);  \n    var image = sources[0].thumbnail.toDataURL();        \n    document.body.style.background = `url(\"${image}\") top right no-repeat`;\n    document.body.style.backgroundAttachment = \"fixed\";\n\n    function determineScreenShotSize () {\n      const width = 2560;\n      const height = 1440;\n      const maxDimension = Math.max(width, height)\n      return {\n        width: maxDimension * window.devicePixelRatio,\n        height: maxDimension * window.devicePixelRatio\n      }\n    }\n  }\n\n  \n}\n","<span [innerText]=\"title\"></span>","import { Injectable } from '@angular/core';\r\nimport * as Electron from 'electron';\r\nexport const electron : Electron.RendererInterface = window.require('electron');\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ElectronService {\r\n\r\n    public electron: Electron.RendererInterface;\r\n    constructor() {\r\n        this.electron = electron;\r\n    }\r\n\r\n    /**\r\n     * determines if SPA is running in Electron\r\n     */\r\n    public get isElectronApp(): boolean {\r\n        return !!window.navigator.userAgent.match(/Electron/);\r\n    }\r\n\r\n    public get isMacOS(): boolean {\r\n        return this.isElectronApp && process.platform === 'darwin';\r\n    }\r\n\r\n    public get isWindows(): boolean {\r\n        return this.isElectronApp && process.platform === 'win32';\r\n    }\r\n\r\n    public get isLinux(): boolean {\r\n        return this.isElectronApp && process.platform === 'linux';\r\n    }\r\n\r\n    public get isX86(): boolean {\r\n        return this.isElectronApp && process.arch === 'ia32';\r\n    }\r\n\r\n    public get isX64(): boolean {\r\n        return this.isElectronApp && process.arch === 'x64';\r\n    }\r\n\r\n    public get isArm(): boolean {\r\n        return this.isElectronApp && process.arch === 'arm';\r\n    }\r\n\r\n    public get desktopCapturer(): Electron.DesktopCapturer {\r\n        return this.electron ? this.electron.desktopCapturer : null;\r\n    }\r\n\r\n    public get ipcRenderer(): Electron.IpcRenderer {\r\n        return this.electron ? this.electron.ipcRenderer : null;\r\n    }\r\n\r\n    public get remote(): Electron.Remote {\r\n        return this.electron ? this.electron.remote : null;\r\n    }\r\n\r\n    public get webFrame(): Electron.WebFrame {\r\n        return this.electron ? this.electron.webFrame : null;\r\n    }\r\n\r\n    public get clipboard(): Electron.Clipboard {\r\n        return this.electron ? this.electron.clipboard : null;\r\n    }\r\n\r\n    public get crashReporter(): Electron.CrashReporter {\r\n        return this.electron ? this.electron.crashReporter : null;\r\n    }\r\n\r\n    public get process(): any {\r\n        return this.remote ? this.remote.process : null;\r\n    }\r\n\r\n    public get nativeImage(): typeof Electron.nativeImage {\r\n        return this.electron ? this.electron.nativeImage : null;\r\n    }\r\n\r\n    public get screen(): Electron.Screen {\r\n        return this.electron ? this.remote.screen : null;\r\n    }\r\n\r\n    public get shell(): Electron.Shell {\r\n        return this.electron ? this.electron.shell : null;\r\n    }\r\n}\r\n"]}